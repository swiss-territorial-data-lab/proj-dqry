##### Detection by inference #####
# Automatic detection of Mineral Extraction Sites (MES) in satellite images from Open Data Cubes

# Produce tiles geometry according to the AoI extent and zoom level
prepare_data.py: 
  datasets:   
    shapefile: ./data/AoI/aoi_brazil_4326.shp
  output_folder: ./output/det/[SATELLITE IMAGE NAME]/
  zoom_level: 14  # z, max 14 for LANDSAT and SENTINEL images  

# Fetch of tiles (online server) and split into 3 datasets: train, test, validation
generate_tilesets.py:
  debug_mode: 
    enable: True  # sample of tiles
    nb_tiles_max: 2000
  working_directory: .
  datasets:
    aoi_tiles: ./output/det/[SATELLITE IMAGE NAME]/tiles.geojson
    image_source:
      type: WMS   # supported values: 1. MIL = Map Image Layer 2. WMS 3. XYZ 4. FOLDER
      srs: EPSG:3857
      ## Settings in brackets are to be selected according to preferred parameters and server capabilities (check #getcapabilities from DataCube or Server)
      ## SwissDataCube
      # layers: landsat_ot_c2_l2
      # location: https://ows.swissdatacube.org/?service=WMS&request=GetMap&version=1.3.0&layers=landsat_ot_c2_l2&styles=simple_rgb&crs=EPSG:3857&bbox=5.82094745,45.69217318,10.58912293,47.81708853&width=256&height=256&format=image/png&time=2020-08-11     
      ## BrazilianDataCube
      # layers: mosaic-landsat-brazil-6m
      # location: https://data.inpe.br/bdc/geoserver/mosaics/ows?SERVICE=WMS&REQUEST=GetMap&VERSION=1.3.0&LAYERS=mosaic-landsat-brazil-6m&STYLES=raster&CRS=EPSG:3857&TIME=2017-07-01T00:00:00.000Z/2018-01-01T00:00:00.000Z&WIDTH=256&HEIGHT=256&BBOX=-8210729.32210553,-3743686.60247694,-3204262.47299497,585552.62310988&FORMAT=image/png      #BBox of Brazil
      # layers: mosaic-landsat-amazon-3m
      # location: https://data.inpe.br/bdc/geoserver/mosaics/ows?SERVICE=WMS&REQUEST=GetMap&VERSION=1.3.0&LAYERS=mosaic-landsat-amazon-3m&STYLES=raster&CRS=EPSG:3857&TIME=2016-07-01T00:00:00.000Z&WIDTH=256&HEIGHT=256&BBOX=-8210729.32210553,-3743686.60247694,-3204262.47299497,585552.62310988&FORMAT=image/png 
      layers: mosaic-s2-amazon-3m
      location: https://data.inpe.br/bdc/geoserver/mosaics/ows?SERVICE=WMS&REQUEST=GetMap&VERSION=1.3.0&LAYERS=mosaic-s2-amazon-3m&STYLES=raster&CRS=EPSG:3857&TIME=2022-06-01T00:00:00.000Z/2022-08-01T00:00:00.000Z&WIDTH=256&HEIGHT=256&BBOX=-8210729.32210553,-3743686.60247694,-3204262.47299497,585552.62310988&FORMAT=image/png
  output_folder: ./output/det/[SATELLITE IMAGE NAME]/
  tile_size: 256      # per side, in pixels
  overwrite: True
  n_jobs: 10
  seed: 2
  COCO_metadata:
    year: 2020
    version: 1.0
    description: Landsat-8/Sentinel-2 background with Mineral Exploitation Sites labels
    contributor: SwissDataCube or BrazilDataCube
    url: https://explorer.swissdatacube.org/product
    license:
      name: unknown
      url: unknown
    categories_file: ./output/trne/[SATELLITE IMAGE NAME]/category_ids.json

# Object detection with the optimised trained model
make_detections.py:
  working_directory: ./output/det/[SATELLITE IMAGE NAME]/
  log_subfolder: logs
  sample_tagged_img_subfolder: sample_tagged_images
  COCO_files:           # relative paths, w/ respect to the working_folder
    oth: COCO_oth.json
  detectron2_config_file: ../../../config/detectron2_config.yaml # path relative to the working_folder
  model_weights:
    pth_file: ../../../models/[SATELLITE IMAGE NAME]/model_0003999.pth # trained model minimising the validation loss curve, monitor the training process via tensorboard (tensorboard --logdir </logs>)
  image_metadata_json: img_metadata.json
  rdp_simplification:   # rdp = Ramer-Douglas-Peucker
    enabled: True
    epsilon: 2.0        # cf. https://rdp.readthedocs.io/en/latest/
  score_lower_threshold: 0.3
  remove_det_overlap: False  # if several detections overlap (IoU > 0.5), only the one with the highest confidence score is retained. Not recommended for use with a single class.

# Assess the final results
merge_detections.py:
  working_directory: ./output/det/[SATELLITE IMAGE NAME]/
  labels: labels.geojson
  detections:
    oth: oth_detections_at_0dot3_threshold.gpkg
  distance: 10 # m, distance use as a buffer to merge close polygons (likely to belong to the same object) together
  iou_threshold: 0.1
  score_threshold: 0.3 # choose a value
  assess: 
    enable: False
    metrics_method: macro-average   # 1: macro-average ; 2: macro-weighted-average ; 3: micro-average

# Filtering and merging detection polygons to improve final results
filter_detections.py:
  working_directory: ./data
  detections: ../output/det/[SATELLITE IMAGE NAME]/merged_detections_at_0dot3_threshold.gpkg
  aoi: ./AoI/aoi_brazil_4326.shp
  # dem: ./DEM/switzerland_dem_EPSG2056.tif
  # slope: ./slope/switzerland_slope_EPSG2056.tif
  # elevation_threshold: 1200 # m, altitude threshold
  # min_slope_threshold: 1.0 # °, min slope threshold
  # max_slope_threshold: 48.0 # °, max slope threshold
  score_threshold: 0.5 # detection score (from 0 to 1) provided by detectron2
  area_threshold: 50.0 # m2, area threshold under which polygons are discarded

merge_years.py:
  working_directory: ./output/det/[SATELLITE IMAGE NAME]/
  years: [[YEAR1], [YEAR2], [YEAR3]]           # choose year
  layer: merged_detections_at_0dot3_threshold_threshold_score-0dot95_area-50_elevation-1200.gpkg 
  overwrite: True
  file: layers   # supported values: 1. layers, 2. concatenate