#############################################
####### Model training and evaluation ####### 
# Training of automatic detection of Mineral Extraction Sites (MES) in images with a provided ground truth

# 1-Prepare the tiles geometry according to the AOI and zoom level
prepare_data.py:  
  srs: EPSG:2056
  datasets:
    shapefile: ./data/ground_truth/tlm-hr-trn-topo.shp
    # fp_shapefile: ./data/FP/<FP_SHPFILE>                # FP labels
    # empty_tiles_aoi: ./data/AoI/<AOI_SHPFILE>           # AOI in which additional empty tiles can be selected. Only one 'empty_tiles' option can be selected  
    # empty_tiles_year: <YEAR>                            # If "empty_tiles_aoi" selected then provide a year. Choice: (1) numeric (i.e. 2020), (2) [year1, year2] (random selection of a year within a given year range) 
    # empty_tiles_shp: ./data/empty_tiles/<EMPTY_TILES_SHPFILE>    # Provided shapefile of selected empty tiles. Only one 'empty_tiles' option can be selected                     
    # category: <CLASS_COL_NAME>                          # If it exists, indicate the attribute column name of the label class
  output_folder: ./output/trne
  zoom_level: 16  #z, keep between 15 and 18  

# 2-Fetch of tiles (online server) and split into 3 datasets: train, test, validation
generate_tilesets.py:
  debug_mode: False # sample of tiles
  datasets:
    aoi_tiles_geojson: ./output/trne/tiles.geojson
    ground_truth_labels_geojson: ./output/trne/labels.geojson
    orthophotos_web_service:
      type: XYZ # supported values: 1. MIL = Map Image Layer 2. WMS 3. XYZ
      url: https://wmts.geo.admin.ch/1.0.0/ch.swisstopo.swissimage-product/default/2020/3857/{z}/{x}/{y}.jpeg # Models are trained on 2020 (default year) SWISSIMAGE mosaic 
  output_folder: ./output/trne
  tile_size: 256 # per side, in pixels
  overwrite: False
  n_jobs: 10
  COCO_metadata:
    year: 2021
    version: 1.0
    description: Swiss Image Hinterground w/ Mineral Exploitation Site detection
    contributor: swisstopo
    url: https://swisstopo.ch
    license:
      name: Unknown
      url:

# 3-Train the model with the detectron2 algorithm
# Monitor the training process via tensorboard (tensorboard --logdir </logs>). Choice of the optimized model: minimisation of the validation loss curve
train_model.py:
  working_folder: ./output/trne
  log_subfolder: logs
  sample_tagged_img_subfolder: sample_tagged_images
  COCO_files: # relative paths, w/ respect to the working_folder
    trn: COCO_trn.json
    val: COCO_val.json
    tst: COCO_tst.json
  detectron2_config_file: ../../config/detectron2_config_dqry.yaml # path relative to the working_folder
  model_weights:
    model_zoo_checkpoint_url: COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml

# 4-Perform the object detection based on the optimized trained model
make_detections.py:
  working_folder: ./output/trne
  log_subfolder: logs
  sample_tagged_img_subfolder: sample_tagged_images
  COCO_files: # relative paths, w/ respect to the working_folder
    trn: COCO_trn.json
    val: COCO_val.json
    tst: COCO_tst.json
  detectron2_config_file: ../../config/detectron2_config_dqry.yaml # path relative to the working_folder
  model_weights:
    pth_file: ./logs/model_0002999.pth                        # trained model minimizing the validation loss curve, 
                                                                # monitoring of the training process via tensorboard (tensorboard --logdir </logs>)
                                                                # for the provided parameters model_0002999.pth is chosen 
  image_metadata_json: ./output/trne/img_metadata.json
  rdp_simplification: # rdp = Ramer-Douglas-Peucker
    enabled: true
    epsilon: 2.0 # cf. https://rdp.readthedocs.io/en/latest/
  score_lower_threshold: 0.05
    
# 5-Evaluate the quality of the detection for the different datasets with metrics calculation
assess_detections.py:
  datasets:
    ground_truth_labels_geojson: ./output/trne/labels.geojson
    image_metadata_json: ./output/trne/img_metadata.json
    split_aoi_tiles_geojson: ./output/trne/split_aoi_tiles.geojson # aoi = Area of Interest
    detections:
      trn: ./output/trne/trn_detections_at_0dot05_threshold.gpkg
      val: ./output/trne/val_detections_at_0dot05_threshold.gpkg
      tst: ./output/trne/tst_detections_at_0dot05_threshold.gpkg
  output_folder: ./output/trne