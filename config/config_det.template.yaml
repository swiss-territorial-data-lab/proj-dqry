##### Detection by inference #####
#######      template      ####### 
# Automatic detection of Mineral Extraction Sites (MES) in raster images

# 1-Prepare the tiles geometry according to the AOI and zoom level
prepare_data.py: 
  datasets:
    shapefile: ./data/AoI/[AOI_SHPFILE]
  output_folder: ./output/det/YEAR/
  zoom_level: [ZOOM_LEVEL]  # z  

# 2-Request tiles according to the provided AOI and tiles parameters
generate_tilesets.py:
  debug_mode: 
    enable: False # sample of tiles
    nb_tiles_max: 5000
  working_directory: .
  datasets:
    aoi_tiles: ./output/det/YEAR/tiles.geojson
    image_source:
      ## SWISSIMAGE via WMTS  
      type: XYZ                             # supported values: 1. MIL = Map Image Layer 2. WMS 3. XYZ 4. FOLDER
      year: [YEAR]                          # supported values: 1. multi-year (tiles of different year), 2. integer (i.e. 2020)
      location: https://wmts.geo.admin.ch/1.0.0/ch.swisstopo.swissimage-product/default/{year}/[EPSG]/{z}/{x}/{y}.jpeg
      ## Satelites images via WMS from ODC
      type: WMS                             # supported values: 1. MIL = Map Image Layer 2. WMS 3. XYZ 4. FOLDER  
      layers: [LAYER] 
      ### SwissDataCube
      # location: https://ows.swissdatacube.org/?service=WMS&request=GetMap&version=1.3.0&layers=[LAYER_NAME]&styles=[STYLE]&crs=[EPSG]&bbox=[BBOX_AOI]]&width=[TILE_SIZE]&height=[TILE_SIZE]&format=[FORMAT]&time=[YEAR-MONTH-DAY]  
      ### BrazilianDataCube 
      # location: https://data.inpe.br/bdc/geoserver/mosaics/ows?SERVICE=WMS&REQUEST=GetMap&VERSION=1.3.0&LAYERS=[LAYER]&STYLES=raster&CRS=EPSG:[EPSG]&TIME=[YEAR-MONTH-DAYT00:00:00.000]Z&WIDTH=[SIZE]&HEIGHT=[SIZE]&BBOX=[BBOX_AOI]&FORMAT=[FORMAT] 
  output_folder: ./output/det/YEAR/
  tile_size: 256 # per side, in pixels
  overwrite: True
  n_jobs: 10
  # seed: 42  # optional 
  COCO_metadata:
    year: [YEAR]
    version: 1.0
    description: Image background with Mineral Exploitation Sites labels
    contributor: unknown
    url: unknown
    license:
      name: unknown
      url: unknown
    categories_file: ./output/trne/category_ids.json

# Object detection with the optimised trained model
make_detections.py:
  working_directory: ./output/det/YEAR/
  log_subfolder: logs
  sample_tagged_img_subfolder: sample_tagged_images
  COCO_files:           # relative paths, w/ respect to the working_folder
    oth: COCO_oth.json
  detectron2_config_file: ../../../config/detectron2_config.yaml # path relative to the working_folder
  model_weights:
    pth_file: ../../../models/model_[ITERATION].pth # trained model minimising the validation loss curve, monitor the training process via tensorboard (tensorboard --logdir </logs>)
  image_metadata_json: img_metadata.json
  rdp_simplification:   # rdp = Ramer-Douglas-Peucker
    enabled: True
    epsilon: 2.0        # cf. https://rdp.readthedocs.io/en/latest/
  score_lower_threshold: [SCORE_THD] 
  remove_det_overlap: False  # if several detections overlap (IoU > 0.5), only the one with the highest confidence score is retained. Not recommended for use with a single class.

# Assess the final results
merge_detections.py:
  working_directory: ./output/det/YEAR/
  labels: labels.geojson
  detections:
    oth: oth_detections_at_0dot[SCORE_THD]_threshold.gpkg
  distance: [DISTANCE] # m, distance use as a buffer to merge close polygons (likely to belong to the same object) together
  iou_threshold: [IOU_THD]
  score_threshold: [SCORE_THD] 
  assess: 
    enable: False
    metrics_method: macro-average   # 1: macro-average ; 2: macro-weighted-average ; 3: micro-average

# Filtering and merging detection polygons to improve final results
filter_detections.py:
  working_directory: ./data
  detections: ../output/det/merged_detections_at_0dot[SCORE_THD]_threshold.gpkg
  aoi: ./AoI/[AOI_SHPFILE] 
  dem: ./DEM/[DEM_EPSG2056_TIF] # optional
  slope: ./DEM/[SLOPE_EPSG2056_TIF] # optional
  elevation_threshold: [ELEVATION_THD]  # m, altitude threshold, optional
  min_slope_threshold: [MIN_SLOPE_THD]  # °, min slope threshold, optional
  max_slope_threshold: [MAX_SLOPE_THD]  # °, max slope threshold, optional
  score_threshold: [SCORE_THD]  # detection score (from 0 to 1) provided by detectron2, optional
  area_threshold: [AREA_THD]  # m2, area threshold under which polygons are discarded, optional
