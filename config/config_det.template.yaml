##### Detection by inference #####
#######      template      ####### 
# Automatic detection of Mineral Extraction Sites (MES) in images

# 1-Prepare the tiles geometry according to the AOI and zoom level
prepare_data.py: 
  datasets:
    shapefile: ./data/AoI/swissimage_footprint_SWISSIMAGE_YEAR.shp
  output_folder: ./output/det/SWISSIMAGE_YEAR
  zoom_level: 16  # z, keep between 15 and 18  

# 2-Request tiles according to the provided AOI and tiles parameters
generate_tilesets.py:
  debug_mode: 
    enable: False # sample of tiles
    nb_tiles_max: 5000
  working_directory: .
  datasets:
    aoi_tiles: ./output/det/SWISSIMAGE_YEAR/tiles.geojson
    image_source:
      type: XYZ                             # supported values: 1. MIL = Map Image Layer 2. WMS 3. XYZ 4. FOLDER
      year: SWISSIMAGE_YEAR                 # supported values: 1. multi-year (tiles of different year), 2. <year> (i.e. 2020)
      location: https://wmts.geo.admin.ch/1.0.0/ch.swisstopo.swissimage-product/default/{year}/3857/{z}/{x}/{y}.jpeg
  output_folder: ./output/det/SWISSIMAGE_YEAR
  tile_size: 256 # per side, in pixels
  overwrite: True
  n_jobs: 10
  COCO_metadata:
    year: 2021
    version: 1.0
    description: Swiss Image Hinterground w/ Mineral Exploitation Site detection
    contributor: swisstopo
    url: https://swisstopo.ch
    license:
      name: unknown
      url: unknown
    categories_file: ./data/category_ids.json

# Object detection with the optimised trained model
make_detections.py:
  working_directory: ./output/det/SWISSIMAGE_YEAR
  log_subfolder: logs
  sample_tagged_img_subfolder: sample_tagged_images
  COCO_files:           # relative paths, w/ respect to the working_folder
    oth: COCO_oth.json
  detectron2_config_file: ../../../config/detectron2_config.yaml # path relative to the working_folder
  model_weights:
    pth_file: ../../../models/model_0002999.pth # trained model minimising the validation loss curve, monitor the training process via tensorboard (tensorboard --logdir </logs>)
  image_metadata_json: img_metadata.json
  rdp_simplification:   # rdp = Ramer-Douglas-Peucker
    enabled: True
    epsilon: 2.0        # cf. https://rdp.readthedocs.io/en/latest/
  score_lower_threshold: 0.3
  remove_det_overlap: False  # if several detections overlap (IoU > 0.5), only the one with the highest confidence score is retained

# Filter and merge detection polygons to improve results
filter_detections.py:
  year: SWISSIMAGE_YEAR
  detections: ./output/det/SWISSIMAGE_YEAR/oth_detections_at_0dot3_threshold.gpkg
  shapefile: ./data/AoI/swissimage_footprint_SWISSIMAGE_YEAR.shp
  dem: ./data/DEM/switzerland_dem_EPSG2056.tif
  elevation: 1200.0 # m, altitude threshold
  score: 0.95 # detection score (from 0 to 1) provided by detectron2
  distance: 10 # m, distance use as a buffer to merge close polygons (likely to belong to the same object) together
  area: 5000.0 # m2, area threshold under which polygons are discarded
  output: ./output/det/SWISSIMAGE_YEAR/oth_detections_at_0dot3_threshold_year-{year}_score-{score}_area-{area}_elevation-{elevation}_distance-{distance}.geojson